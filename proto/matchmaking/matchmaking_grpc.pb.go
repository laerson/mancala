// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/matchmaking/matchmaking.proto

package matchmakingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaking_Enqueue_FullMethodName        = "/proto.matchmaking.Matchmaking/Enqueue"
	Matchmaking_CancelQueue_FullMethodName    = "/proto.matchmaking.Matchmaking/CancelQueue"
	Matchmaking_GetQueueStatus_FullMethodName = "/proto.matchmaking.Matchmaking/GetQueueStatus"
	Matchmaking_StreamUpdates_FullMethodName  = "/proto.matchmaking.Matchmaking/StreamUpdates"
)

// MatchmakingClient is the client API for Matchmaking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingClient interface {
	// Enqueue a player for matchmaking
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	// Cancel matchmaking queue
	CancelQueue(ctx context.Context, in *CancelQueueRequest, opts ...grpc.CallOption) (*CancelQueueResponse, error)
	// Get current queue status
	GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error)
	// Stream matchmaking updates (optional real-time updates)
	StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchmakingUpdate], error)
}

type matchmakingClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingClient(cc grpc.ClientConnInterface) MatchmakingClient {
	return &matchmakingClient{cc}
}

func (c *matchmakingClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, Matchmaking_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingClient) CancelQueue(ctx context.Context, in *CancelQueueRequest, opts ...grpc.CallOption) (*CancelQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelQueueResponse)
	err := c.cc.Invoke(ctx, Matchmaking_CancelQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingClient) GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatusResponse)
	err := c.cc.Invoke(ctx, Matchmaking_GetQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingClient) StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchmakingUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Matchmaking_ServiceDesc.Streams[0], Matchmaking_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUpdatesRequest, MatchmakingUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaking_StreamUpdatesClient = grpc.ServerStreamingClient[MatchmakingUpdate]

// MatchmakingServer is the server API for Matchmaking service.
// All implementations must embed UnimplementedMatchmakingServer
// for forward compatibility.
type MatchmakingServer interface {
	// Enqueue a player for matchmaking
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	// Cancel matchmaking queue
	CancelQueue(context.Context, *CancelQueueRequest) (*CancelQueueResponse, error)
	// Get current queue status
	GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error)
	// Stream matchmaking updates (optional real-time updates)
	StreamUpdates(*StreamUpdatesRequest, grpc.ServerStreamingServer[MatchmakingUpdate]) error
	mustEmbedUnimplementedMatchmakingServer()
}

// UnimplementedMatchmakingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakingServer struct{}

func (UnimplementedMatchmakingServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedMatchmakingServer) CancelQueue(context.Context, *CancelQueueRequest) (*CancelQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQueue not implemented")
}
func (UnimplementedMatchmakingServer) GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStatus not implemented")
}
func (UnimplementedMatchmakingServer) StreamUpdates(*StreamUpdatesRequest, grpc.ServerStreamingServer[MatchmakingUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedMatchmakingServer) mustEmbedUnimplementedMatchmakingServer() {}
func (UnimplementedMatchmakingServer) testEmbeddedByValue()                     {}

// UnsafeMatchmakingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServer will
// result in compilation errors.
type UnsafeMatchmakingServer interface {
	mustEmbedUnimplementedMatchmakingServer()
}

func RegisterMatchmakingServer(s grpc.ServiceRegistrar, srv MatchmakingServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaking_ServiceDesc, srv)
}

func _Matchmaking_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaking_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaking_CancelQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServer).CancelQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaking_CancelQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServer).CancelQueue(ctx, req.(*CancelQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaking_GetQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServer).GetQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaking_GetQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServer).GetQueueStatus(ctx, req.(*GetQueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaking_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakingServer).StreamUpdates(m, &grpc.GenericServerStream[StreamUpdatesRequest, MatchmakingUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaking_StreamUpdatesServer = grpc.ServerStreamingServer[MatchmakingUpdate]

// Matchmaking_ServiceDesc is the grpc.ServiceDesc for Matchmaking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.matchmaking.Matchmaking",
	HandlerType: (*MatchmakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _Matchmaking_Enqueue_Handler,
		},
		{
			MethodName: "CancelQueue",
			Handler:    _Matchmaking_CancelQueue_Handler,
		},
		{
			MethodName: "GetQueueStatus",
			Handler:    _Matchmaking_GetQueueStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _Matchmaking_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/matchmaking/matchmaking.proto",
}
