// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/games/games.proto

package gamespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Games_Create_FullMethodName = "/proto.games.Games/Create"
	Games_Move_FullMethodName   = "/proto.games.Games/Move"
)

// GamesClient is the client API for Games service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesClient interface {
	Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	Move(ctx context.Context, in *MakeGameMoveRequest, opts ...grpc.CallOption) (*MakeGameMoveResponse, error)
}

type gamesClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesClient(cc grpc.ClientConnInterface) GamesClient {
	return &gamesClient{cc}
}

func (c *gamesClient) Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, Games_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) Move(ctx context.Context, in *MakeGameMoveRequest, opts ...grpc.CallOption) (*MakeGameMoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeGameMoveResponse)
	err := c.cc.Invoke(ctx, Games_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesServer is the server API for Games service.
// All implementations must embed UnimplementedGamesServer
// for forward compatibility.
type GamesServer interface {
	Create(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	Move(context.Context, *MakeGameMoveRequest) (*MakeGameMoveResponse, error)
	mustEmbedUnimplementedGamesServer()
}

// UnimplementedGamesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGamesServer struct{}

func (UnimplementedGamesServer) Create(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGamesServer) Move(context.Context, *MakeGameMoveRequest) (*MakeGameMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedGamesServer) mustEmbedUnimplementedGamesServer() {}
func (UnimplementedGamesServer) testEmbeddedByValue()               {}

// UnsafeGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesServer will
// result in compilation errors.
type UnsafeGamesServer interface {
	mustEmbedUnimplementedGamesServer()
}

func RegisterGamesServer(s grpc.ServiceRegistrar, srv GamesServer) {
	// If the following call pancis, it indicates UnimplementedGamesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Games_ServiceDesc, srv)
}

func _Games_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).Create(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeGameMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).Move(ctx, req.(*MakeGameMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Games_ServiceDesc is the grpc.ServiceDesc for Games service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Games_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.games.Games",
	HandlerType: (*GamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Games_Create_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Games_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/games/games.proto",
}
