syntax = "proto3";
package proto.event_bus;

import "proto/engine/engine.proto";

option go_package = "github.com/laerson/mancala/proto/event-bus;eventbuspb";

// Event types
enum EventType {
    MOVE_MADE = 0;
    GAME_OVER = 1;
    MATCH_FOUND = 2;
}

// Common event metadata
message EventMetadata {
    string event_id = 1;
    string game_id = 2;
    int64 timestamp = 3;
    EventType event_type = 4;
}

// Move made event payload
message MoveMadeEvent {
    EventMetadata metadata = 1;
    string player_id = 2;
    uint32 pit_index = 3;
    proto.engine.GameState game_state = 4;
    proto.engine.MoveResult move_result = 5;
}

// Game over event payload
message GameOverEvent {
    EventMetadata metadata = 1;
    proto.engine.GameState final_state = 2;
    string winner_id = 3;
    bool is_draw = 4;
}

// Match found event payload (from matchmaking)
message MatchFoundEvent {
    EventMetadata metadata = 1;
    string match_id = 2;
    string player1_id = 3;
    string player1_name = 4;
    string player2_id = 5;
    string player2_name = 6;
    int32 player1_skill = 7;
    int32 player2_skill = 8;
}

// Generic event wrapper
message Event {
    oneof payload {
        MoveMadeEvent move_made = 1;
        GameOverEvent game_over = 2;
        MatchFoundEvent match_found = 3;
    }
}

// Publish event request
message PublishEventRequest {
    Event event = 1;
}

message PublishEventResponse {
    bool success = 1;
    string error_message = 2;
}

// Subscribe to events request
message SubscribeRequest {
    repeated EventType event_types = 1;
    string game_id = 2; // Optional: filter by specific game
}

// Streaming response for subscriptions
message EventStream {
    Event event = 1;
}

service EventBus {
    // Publish an event to the Redis stream
    rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse);

    // Subscribe to events (streaming response)
    rpc Subscribe(SubscribeRequest) returns (stream EventStream);
}