name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git tag --sort=-version:refname | sed -n '2p')
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG=$(git rev-list --max-parents=0 HEAD)
        fi

        echo "## Changes in ${{ steps.get_version.outputs.tag_name }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --pretty=format:"- %s (%an)" $LAST_TAG..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Release ${{ steps.get_version.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        service: [engine, games]
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Generate protobuf code
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        protoc --proto_path=. \
          --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          proto/engine/engine.proto proto/games/games.proto

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="${{ matrix.service }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${{ matrix.service }}.exe"
        fi

        go build -ldflags="-w -s -X main.version=${{ needs.create-release.outputs.tag_name }}" \
          -o "dist/${BINARY_NAME}" \
          "./cmd/${{ matrix.service }}"

    - name: Create archive
      run: |
        cd dist
        BINARY_NAME="${{ matrix.service }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${{ matrix.service }}.exe"
        fi

        ARCHIVE_NAME="mancala-${{ matrix.service }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"

        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          echo "ASSET_PATH=dist/${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          echo "ASSET_CONTENT_TYPE=application/zip" >> $GITHUB_ENV
        else
          tar czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          echo "ASSET_PATH=dist/${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_CONTENT_TYPE=application/gzip" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}

  build-iac-archive:
    name: Build IaC Archive
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create IaC archive
      run: |
        cd iac
        tar czf "../mancala-iac-${{ needs.create-release.outputs.tag_name }}.tar.gz" \
          --exclude='.terraform*' \
          --exclude='*.tfstate*' \
          --exclude='inventory.ini' \
          .

    - name: Upload IaC Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: "mancala-iac-${{ needs.create-release.outputs.tag_name }}.tar.gz"
        asset_name: "mancala-iac-${{ needs.create-release.outputs.tag_name }}.tar.gz"
        asset_content_type: application/gzip

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: github.repository_owner == 'laerson'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Generate API docs
      run: |
        mkdir -p docs/api

        # Generate protobuf documentation (if protoc-gen-doc is available)
        echo "# API Documentation" > docs/api/README.md
        echo "" >> docs/api/README.md
        echo "## Engine Service" >> docs/api/README.md
        echo '```protobuf' >> docs/api/README.md
        cat proto/engine/engine.proto >> docs/api/README.md
        echo '```' >> docs/api/README.md
        echo "" >> docs/api/README.md
        echo "## Games Service" >> docs/api/README.md
        echo '```protobuf' >> docs/api/README.md
        cat proto/games/games.proto >> docs/api/README.md
        echo '```' >> docs/api/README.md

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2