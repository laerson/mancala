name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/mancala

jobs:
  test:
    name: Run Tests Before Build
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Generate protobuf code
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        protoc --proto_path=. \
          --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          proto/engine/engine.proto proto/games/games.proto

    - name: Run tests
      run: go test -v -race ./...
      env:
        CGO_ENABLED: 1

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [engine, games]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Generate protobuf code
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        protoc --proto_path=. \
          --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          proto/engine/engine.proto proto/games/games.proto

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}
        flavor: |
          latest=auto
          suffix=-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./cmd/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_PREFIX }}:latest-${{ matrix.service }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  update-k8s-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Update image tags in Kubernetes manifests
      run: |
        VERSION=${{ steps.version.outputs.version }}

        # Update engine image
        sed -i "s|image: ghcr.io/.*/mancala:.*-engine|image: ${{ env.IMAGE_PREFIX }}:${VERSION}-engine|g" k8s/engine.yaml

        # Update games image
        sed -i "s|image: ghcr.io/.*/mancala:.*-games|image: ${{ env.IMAGE_PREFIX }}:${VERSION}-games|g" k8s/games.yaml

    - name: Create Pull Request for manifest updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update image tags to ${{ steps.version.outputs.version }}"
        title: "Update image tags to ${{ steps.version.outputs.version }}"
        body: |
          This PR updates the Kubernetes manifests with the new image tags for release ${{ steps.version.outputs.version }}.

          Changes:
          - Updated engine service image tag
          - Updated games service image tag

          Auto-generated by GitHub Actions.
        branch: update-manifests-${{ steps.version.outputs.version }}
        delete-branch: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, update-k8s-manifests]
    if: always()

    steps:
    - name: Notify success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "‚úÖ Successfully built and pushed images"
        echo "üè∑Ô∏è  Images available at:"
        echo "   - ${{ env.IMAGE_PREFIX }}:latest-engine"
        echo "   - ${{ env.IMAGE_PREFIX }}:latest-games"

    - name: Notify failure
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "‚ùå Build and push failed"
        exit 1